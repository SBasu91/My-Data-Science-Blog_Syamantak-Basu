{
  "hash": "07dc9d3701e61643bca919087cb90da0",
  "result": {
    "markdown": "---\ntitle: \"PARI Dataset Code\"\nauthor: \"Syamantak Basu\"\ndate: \"2023-11-05\"\ncategories: [news, code, analysis, citizen journalism]\nimage: \"Image 2.jpeg\"\n---\n\n\nThis is a post with executable code.\n\nThe dataset for this code is derived from the website of the public non-profit citizen-run archive known as the People's Archive of Rural India (PARI). I collected this dataset by writing a code scraper in Python, with the help of I-School professor Dr Zoe LeBlanc, for the class \"Culture at Scale.\" The scraper is designed to collect the headlines of all the stories gathered under one category on the website known as \"Farming and its Crisis: The Troubled World of Agriculture.\" The scraper collected 348 stories hosted in the category between July 18, 2014 and April 29, 2023 (since my analyses were conducted right after that date). The website, and in particular this category, may be found at https://ruralindiaonline.org/en/stories/categories/farming-and-its-crisis/\n\nThe website is open to all contributors, with stories vetted by a team of volunteer editors, and collects stories directly from the people of rural India. It is therefore one of India's most important citizen archives which amplifies voices from the margins. The material is licensed under a Creative Commons CC 4.0 license, and credits ownership first to the people whose stories are being told, and thereafter to those recording and submitting them. The stories are available in multiple languages, so the scraper was modified to only collect data in English.\n\nI used this as a counterpoint to the Indian newspaper headlines dataset (which compiles headlines from India's major English newspaper), which is why I chose the words farming, digital and poverty for the correlation analysis in the Indian News Headlines Dataset.\n\n**Photo credit:** M. Palani Kumar\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# I scraped and curated this dataset, with the help of Dr Zoe LeBlanc\ndata <- read.csv(\"/Users/syamantakbasu91/Desktop/IS 407 assignments/My Data Science Blog_Syamantak Basu/PARI Compiled and Filtered.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Setting a CRAN repository directly for the tm package\ncran_mirror <- \"https://cloud.r-project.org/\"\n\n# Installing the 'tm' package with the specified CRAN mirror\ninstall.packages(\"tm\", repos = cran_mirror)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe downloaded binary packages are in\n\t/var/folders/8b/kr1x3k6n1gs6fzmv7qjyzx5h0000gn/T//RtmpCkVekm/downloaded_packages\n```\n:::\n\n```{.r .cell-code}\n# Loading the necessary libraries\nlibrary(tm)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: NLP\n```\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Caption_text is the column which has the titles of the stories\ntext_data <- data$caption_text\n\n# Tokenizing the text\ncorpus <- Corpus(VectorSource(text_data))\ncorpus <- tm_map(corpus, content_transformer(tolower))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in tm_map.SimpleCorpus(corpus, content_transformer(tolower)):\ntransformation drops documents\n```\n:::\n\n```{.r .cell-code}\ncorpus <- tm_map(corpus, removePunctuation)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in tm_map.SimpleCorpus(corpus, removePunctuation): transformation drops\ndocuments\n```\n:::\n\n```{.r .cell-code}\ncorpus <- tm_map(corpus, removeNumbers)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in tm_map.SimpleCorpus(corpus, removeNumbers): transformation drops\ndocuments\n```\n:::\n\n```{.r .cell-code}\ncorpus <- tm_map(corpus, removeWords, stopwords(\"english\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in tm_map.SimpleCorpus(corpus, removeWords, stopwords(\"english\")):\ntransformation drops documents\n```\n:::\n\n```{.r .cell-code}\ncorpus <- tm_map(corpus, stripWhitespace)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in tm_map.SimpleCorpus(corpus, stripWhitespace): transformation drops\ndocuments\n```\n:::\n\n```{.r .cell-code}\n# Creating a DocumentTermMatrix\ndtm <- DocumentTermMatrix(corpus)\n\n# Converting the DocumentTermMatrix to a matrix\nmatrix <- as.matrix(dtm)\n\n# Calculating the word frequencies\nword_freq <- colSums(matrix)\n\n# Sorting the word frequencies in descending order\nsorted_freq <- sort(word_freq, decreasing = TRUE)\n\n# Finding the top 5 words besides the single quote\ntop_words <- head(sorted_freq[!names(sorted_freq) %in% \"â€˜\"], 5) #In the first iteration, \"'\" was the most frequent word, so I modified the code to remove it and then show the next five words\n\n# Printing the top 5 words\nprint(top_words)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfarmers    farm    will  farmer   march \n     41      16      12      11      11 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Visualizing the top 5 occurring words\n# Loading the ggplot library\n\nlibrary(ggplot2)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'ggplot2'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:NLP':\n\n    annotate\n```\n:::\n\n```{.r .cell-code}\n# Creating a data frame for the bar plot\ntop_words_df <- data.frame(word = names(top_words), frequency = top_words)\n\n# Defining a color palette for the bars\ncolors <- rainbow(length(top_words_df$word))\n\n# Plotting a bar graph with different colors for each bar\nggplot(top_words_df, aes(x = word, y = frequency, fill = word)) +\n  geom_bar(stat = \"identity\") +\n  xlab(\"Word\") +\n  ylab(\"Frequency\") +\n  ggtitle(\"Top 5 Most Occurring Words\") +\n  scale_fill_manual(values = colors) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Finding the correlation coefficients of the top 5 words\n# Calculating the correlations between the top 5 words\nword_correlations <- cor(matrix[, names(top_words)])\n\n# Printing the correlation matrix\nprint(word_correlations)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            farmers        farm        will      farmer       march\nfarmers  1.00000000 -0.03766696 -0.01866649 -0.06602435 -0.06602435\nfarm    -0.03766696  1.00000000 -0.03831188 -0.03966179  0.11718257\nwill    -0.01866649 -0.03831188  1.00000000 -0.03153000  0.05159454\nfarmer  -0.06602435 -0.03966179 -0.03153000  1.00000000 -0.03264095\nmarch   -0.06602435  0.11718257  0.05159454 -0.03264095  1.00000000\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a scatterplot with color gradients to map the correlations between the top 5 words\n\ninstall.packages(\"tidyr\", repos = cran_mirror)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nThe downloaded binary packages are in\n\t/var/folders/8b/kr1x3k6n1gs6fzmv7qjyzx5h0000gn/T//RtmpCkVekm/downloaded_packages\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\n\n\n\n# Creating a data frame from the correlation matrix\ncorrelation_df <- as.data.frame(word_correlations)\ncorrelation_df$word1 <- rownames(correlation_df)\nrownames(correlation_df) <- NULL\ncorrelation_df <- gather(correlation_df, key = \"word2\", value = \"correlation\", -word1)\n\n# Creating scatterplots for each correlation\nscatterplots <- ggplot(correlation_df, aes(x = word1, y = word2, color = correlation)) +\n  geom_point(size = 3) +\n  scale_color_gradient(low = \"blue\", high = \"red\") +\n  labs(title = \"Word Correlations\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Displaying the scatterplots\nprint(scatterplots)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}